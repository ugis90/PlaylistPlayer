openapi: 3.0.0
info:
  title: Music Playlist Manager API
  description: An API for managing music categories, playlists, and songs
  version: 1.0.0

servers:
  - url: https://api.example.com/v1

paths:
  /categories:
    get:
      summary: Get a list of categories
      tags:
        - category
      operationId: getAllCategories
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pagedResourceResponse"
          headers:
            Pagination:
              $ref: "#/components/headers/Pagination"
    post:
      description: "Create a category"
      tags:
        - category
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCategory"
      responses:
        "201":
          $ref: "#/components/responses/singleCategory"
        "400":
          $ref: "#/components/responses/badRequest"
        "422":
          $ref: "#/components/responses/unprocessableEntity"

  /categories/{categoryId}:
    parameters:
      - $ref: "#/components/parameters/categoryId"
    get:
      summary: Get a category by ID
      tags:
        - category
      operationId: getCategory
      responses:
        "200":
          $ref: "#/components/responses/singleCategory"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update a category by ID
      tags:
        - category
      operationId: updateCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateCategory"
      responses:
        "200":
          $ref: "#/components/responses/singleCategory"
        "400":
          $ref: "#/components/responses/badRequest"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete a category by ID
      tags:
        - category
      operationId: deleteCategory
      responses:
        "204":
          description: Category deleted
        "404":
          $ref: "#/components/responses/notFound"

  /categories/{categoryId}/playlists:
    parameters:
      - $ref: "#/components/parameters/categoryId"
    get:
      summary: Get playlists for a category
      tags:
        - playlist
      operationId: getPlaylists
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: List of playlists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pagedResourceResponse"
          headers:
            Pagination:
              $ref: "#/components/headers/Pagination"
    post:
      description: "Add a playlist"
      tags:
        - playlist
      operationId: createPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createPlaylist"
      responses:
        "201":
          $ref: "#/components/responses/singlePlaylist"
        "400":
          $ref: "#/components/responses/badRequest"
        "422":
          $ref: "#/components/responses/unprocessableEntity"

  /categories/{categoryId}/playlists/{playlistId}:
    parameters:
      - $ref: "#/components/parameters/categoryId"
      - $ref: "#/components/parameters/playlistId"
    get:
      summary: Get a specific playlist for a category
      tags:
        - playlist
      operationId: getPlaylist
      responses:
        "200":
          $ref: "#/components/responses/singlePlaylist"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update a playlist for a category
      tags:
        - playlist
      operationId: updatePlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePlaylist"
      responses:
        "200":
          $ref: "#/components/responses/singlePlaylist"
        "400":
          $ref: "#/components/responses/badRequest"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete a playlist for a category
      tags:
        - playlist
      operationId: deletePlaylist
      responses:
        "204":
          description: Playlist deleted
        "404":
          $ref: "#/components/responses/notFound"

  /categories/{categoryId}/playlists/{playlistId}/songs:
    parameters:
      - $ref: "#/components/parameters/categoryId"
      - $ref: "#/components/parameters/playlistId"
    get:
      summary: Get songs for a specific playlist
      tags:
        - song
      operationId: getSongs
      parameters:
        - $ref: "#/components/parameters/pageNumber"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: List of songs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pagedResourceResponse"
          headers:
            Pagination:
              $ref: "#/components/headers/Pagination"
    post:
      description: "Add a song to a specific playlist"
      tags:
        - song
      operationId: createSong
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createSong"
      responses:
        "201":
          $ref: "#/components/responses/singleSong"
        "400":
          $ref: "#/components/responses/badRequest"
        "422":
          $ref: "#/components/responses/unprocessableEntity"

  /categories/{categoryId}/playlists/{playlistId}/songs/{songId}:
    parameters:
      - $ref: "#/components/parameters/categoryId"
      - $ref: "#/components/parameters/playlistId"
      - $ref: "#/components/parameters/songId"
    get:
      summary: Get a specific song
      tags:
        - song
      operationId: getSong
      responses:
        "200":
          $ref: "#/components/responses/singleSong"
        "404":
          $ref: "#/components/responses/notFound"
    put:
      summary: Update a song
      tags:
        - song
      operationId: updateSong
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateSong"
      responses:
        "200":
          $ref: "#/components/responses/singleSong"
        "400":
          $ref: "#/components/responses/badRequest"
        "404":
          $ref: "#/components/responses/notFound"
        "422":
          $ref: "#/components/responses/unprocessableEntity"
    delete:
      summary: Delete a song
      tags:
        - song
      operationId: deleteSong
      responses:
        "204":
          description: Song deleted
        "404":
          $ref: "#/components/responses/notFound"

components:
  schemas:
    category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        createdOn:
          type: string
          format: date-time

    createCategory:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          minLength: 5
          maxLength: 300

    updateCategory:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          minLength: 5
          maxLength: 300

    playlist:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        createdOn:
          type: string
          format: date-time
        categoryId:
          type: integer

    createPlaylist:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          minLength: 5
          maxLength: 500

    updatePlaylist:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          minLength: 5
          maxLength: 500

    song:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        artist:
          type: string
        duration:
          type: integer
          description: Duration in seconds
        orderId:
          type: integer
          description: The order of the song within the playlist
        createdOn:
          type: string
          format: date-time
        playlistId:
          type: integer

    createSong:
      type: object
      required:
        - title
        - artist
        - duration
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        artist:
          type: string
          minLength: 1
          maxLength: 100
        duration:
          type: integer
          minimum: 1
          description: Duration in seconds

    updateSong:
      type: object
      required:
        - title
        - artist
        - duration
        - orderId
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        artist:
          type: string
          minLength: 1
          maxLength: 100
        duration:
          type: integer
          minimum: 1
          description: Duration in seconds
        orderId:
          type: integer
          minimum: 1
          description: The new order of the song within the playlist

    link:
      type: object
      properties:
        href:
          type: string
        rel:
          type: string
        method:
          type: string

    resourceWithLinks:
      type: object
      properties:
        resource:
          type: object
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"

    pagedResourceResponse:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: "#/components/schemas/resourceWithLinks"
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"

    problemDetails:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    singleCategory:
      description: A single category
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/resourceWithLinks"

    singlePlaylist:
      description: A single playlist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/resourceWithLinks"

    singleSong:
      description: A single song
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/resourceWithLinks"

    badRequest:
      description: Bad request response
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"

    unprocessableEntity:
      description: Unprocessable entity response
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"

    notFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"

  parameters:
    categoryId:
      name: categoryId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the category

    playlistId:
      name: playlistId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the playlist

    songId:
      name: songId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The unique identifier of the song

    pageNumber:
      name: pageNumber
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: The page number for pagination

    pageSize:
      name: pageSize
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 10
      description: The number of items per page for pagination

  headers:
    Pagination:
      description: Pagination metadata
      schema:
        type: string

tags:
  - name: category
    description: Operations related to categories
  - name: playlist
    description: Operations related to playlists
  - name: song
    description: Operations related to songs

externalDocs:
  description: Find more info here
  url: https://example.com/docs